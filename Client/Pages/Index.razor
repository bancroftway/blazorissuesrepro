@page "/"
@using Microsoft.AspNetCore.Authorization
@using FluentValidation
@attribute [Authorize]
@inject IJSRuntime jsRuntime

<h1>Page #1</h1>

<EditForm Model="@MyPerson2" OnValidSubmit="@SubmitValidForm" id="myfrm1">
    <FluentValidationValidator />
    <div class="modal-body">
        <p>
            <label>First Name: </label>
            <InputText type="text" class="form-control" @bind-Value="MyPerson2.FirstName" />
            <ValidationMessage For="@(() => MyPerson2.FirstName)" />
        </p>

        <p>
            <label>Last Name: </label>
            <InputText type="text" class="form-control" @bind-Value="MyPerson2.LastName" />
            <ValidationMessage For="@(() => MyPerson2.LastName)" />
        </p>
    </div>
    <div class="modal-footer">
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>

<hr />


<button class="btn btn-primary" @onclick="ShowModal">Show Modal</button>

<div class="modal fade" id="mymodal" tabindex="-1" role="dialog" aria-labelledby="mymodal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Delete NPT events</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @if (MyPerson != null)
            {
                <EditForm Model="@MyPerson" OnValidSubmit="@SubmitValidForm" id="myfrm2">
                    <FluentValidationValidator />
                    <div class="modal-body">
                        <p>
                            <label>First Name: </label>
                            <InputText type="text" class="form-control" @bind-Value="MyPerson.FirstName" />
                            <ValidationMessage For="@(() => MyPerson.FirstName)" />
                        </p>

                        <p>
                            <label>Last Name: </label>
                            <InputText type="text" class="form-control" @bind-Value="MyPerson.LastName" />
                            <ValidationMessage For="@(() => MyPerson.LastName)" />
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" type="submit">Submit</button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>




@code {
    Person MyPerson { get; set; } = new Person();
    Person MyPerson2 { get; set; } = new Person();

    async Task SubmitValidForm()
    {
        Console.WriteLine("Form Submitted Successfully!");
        await jsRuntime.InvokeVoidAsync("hideModal", DotNetObjectReference.Create(this));
    }

    async Task ShowModal()
    {
        await jsRuntime.InvokeVoidAsync("showModal", DotNetObjectReference.Create(this));
    }

    public class Person
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    public class PersonValidator : AbstractValidator<Person>
    {
        public PersonValidator()
        {
            RuleFor(x => x.FirstName).NotEmpty().WithMessage("First name is required");
        }
    }
}



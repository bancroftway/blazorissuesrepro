@page "/fetchdata"
@using BlazorApp1.Shared
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>There are total of @forecasts.Count() weather forecast records</p>

    <EditForm Model="forecasts">

        <div style="height:600px; overflow-y: scroll;">

            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Context="forecast" ItemSize="50" ItemsProvider="@LoadItems">
                        <ItemContent>
                            <tr @key="forecast.Id">
                                <td>@forecast.Date.ToShortDateString()</td>
                                <td>
                                    <InputNumber class="form-control text-center input-sm" @bind-Value="forecast.TemperatureC" />
                                </td>
                                <td>
                                    @forecast.TemperatureF
                                </td>
                                <td>@forecast.Summary</td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr>
                                <td colspan="4">Loading...</td>
                            </tr>
                        </Placeholder>
                    </Virtualize>
                </tbody>
            </table>
        </div>
    </EditForm>
}


@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
    }

    private async ValueTask<ItemsProviderResult<WeatherForecast>> LoadItems(ItemsProviderRequest request)
    {
        Console.WriteLine($"count: {request.Count}; index: {request.StartIndex};");

        var numItems = Math.Min(request.Count, forecasts.Count() - request.StartIndex);
        var items = forecasts.Skip(request.StartIndex).Take(numItems).ToList();

        return new ItemsProviderResult<WeatherForecast>(items, forecasts.Count());
    }

    private async Task OnTempCChanged(WeatherForecast forecast, int newValue)
    {
        forecast.TemperatureC = newValue;
    }
}
